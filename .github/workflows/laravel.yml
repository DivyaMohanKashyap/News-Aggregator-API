name: Laravel CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Docker network
        run: docker network create laravel-net

      - name: Start MySQL container
        run: |
          docker run -d \
            --name mysql-container \
            --network laravel-net \
            -e MYSQL_DATABASE=news \
            -e MYSQL_ROOT_PASSWORD=root \
            -p 3306:3306 \
            mysql:8.0 \
            --default-authentication-plugin=mysql_native_password

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN_GITHUB }}

      - name: Pull Laravel App Image
        run: docker pull ghcr.io/divyamohankashyap/news-api-app:latest

      - name: Start Laravel App Container
        run: |
          docker run -d \
            --name news-api-app \
            --network laravel-net \
            -v ${{ github.workspace }}:/var/www \
            -w /var/www \
            ghcr.io/divyamohankashyap/news-api-app:latest \
            sleep infinity

      - name: Copy .env.testing into container
        run: docker cp .env.testing news-api-app:/var/www/.env

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if docker exec mysql-container mysqladmin ping -hlocalhost -uroot -proot --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Retrying in 2s..."
            sleep 2
          done

      - name: Install Composer dependencies
        run: docker exec news-api-app composer install --no-interaction --prefer-dist --no-scripts

      - name: Clear Laravel caches
        run: |
          echo "Clearing all caches..."
          docker exec news-api-app php artisan config:clear || true
          docker exec news-api-app php artisan cache:clear || true
          docker exec news-api-app php artisan route:clear || true
          docker exec news-api-app php artisan view:clear || true
          docker exec news-api-app php artisan optimize:clear || true

          echo "Dumping fresh config to make sure File driver is used..."
          docker exec news-api-app php artisan config:cache

      - name: Run migrations
        run: docker exec news-api-app php artisan migrate --force

      - name: Run PHPUnit tests with coverage
        run: docker exec news-api-app php artisan test --env=testing --coverage-clover=coverage.xml

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
